import asyncio
import hashlib
import logging
import ssl
import json
import os
from aiohttp import ClientSession, TCPConnector
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

DATA_FILE = "data/data.json"

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
logger = logging.getLogger(__name__)

# ü§ñ Telegram Bot
TOKEN = os.getenv('TOKEN')
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_sites: dict[int, dict[str, str]] = {}


# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    global user_sites
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            try:
                user_sites = json.load(f)
                user_sites = {int(k): v for k, v in user_sites.items()}
                logger.info("üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(user_sites, f, ensure_ascii=False, indent=2)
        logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


async def fetch_site_content(url: str) -> str:
    try:
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        async with ClientSession(connector=TCPConnector(ssl=ssl_context)) as session:
            async with session.get(url, timeout=10) as response:
                return await response.text()
    except Exception as e:
        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
        return ""


def get_hash(content: str) -> str:
    return hashlib.md5(content.encode("utf-8")).hexdigest()


async def check_sites():
    while True:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤...")
        for user_id, sites in user_sites.items():
            for url in list(sites.keys()):
                content = await fetch_site_content(url)
                if not content:
                    continue
                new_hash = get_hash(content)
                if sites[url] != new_hash:
                    sites[url] = new_hash
                    save_data()
                    logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    try:
                        await bot.send_message(user_id, f"üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: <code>{url}</code>")
                    except Exception as e:
                        logger.error(f"‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                else:
                    logger.info(f"–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç


@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∏ —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
                         "–ö–æ–º–∞–Ω–¥—ã:\n"
                         "/list ‚Äî —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤\n"
                         "/remove <url> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç")


@dp.message(Command("list"))
async def cmd_list(message: Message):
    user_id = message.from_user.id
    sites = user_sites.get(user_id, {})
    if not sites:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤.")
        return
    msg = "\n".join([f"üîó <code>{url}</code>" for url in sites.keys()])
    logger.info(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤")
    await message.answer(f"–¢–≤–æ–∏ —Å–∞–π—Ç—ã:\n{msg}")


@dp.message(Command("remove"))
async def cmd_remove(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /remove <URL>")
        return
    url = args[1].strip()
    if user_id in user_sites and url in user_sites[user_id]:
        del user_sites[user_id][url]
        save_data()
        logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª —Å–∞–π—Ç {url}")
        await message.answer(f"–£–¥–∞–ª–∏–ª —Å–∞–π—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: <code>{url}</code>")
    else:
        await message.answer("–≠—Ç–æ—Ç —Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")


@dp.message(F.text & ~F.text.startswith("/"))
async def handle_link(message: Message):
    url = message.text.strip()
    user_id = message.from_user.id

    if not url.startswith("http"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    content = await fetch_site_content(url)
    if not content:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É.")
        return

    site_hash = get_hash(content)
    if user_id not in user_sites:
        user_sites[user_id] = {}
    user_sites[user_id][url] = site_hash
    save_data()

    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª —Å–∞–π—Ç {url}")
    await message.answer(f"–î–æ–±–∞–≤–∏–ª —Å–∞–π—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <code>{url}</code>")


async def main():
    load_data()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(check_sites())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
